import datetime as dt
import json

import requests
from flask import Flask, jsonify, request

API_TOKEN = ""

app = Flask(__name__)


class InvalidUsage(Exception):
    status_code = 400

    def __init__(self, message, status_code=None, payload=None):
        Exception.__init__(self)
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload

    def to_dict(self):
        rv = dict(self.payload or ())
        rv["message"] = self.message
        return rv

@app.errorhandler(InvalidUsage)
def handle_invalid_usage(error):
    response = jsonify(error.to_dict())
    response.status_code = error.status_code
    return response


@app.route("/")
def home_page():
    return "<p><h2>KMA L2: Python Saas.</h2></p>"


@app.route(
    "/content/api/v1/integration/generate",
    methods=["POST"],
)
def weather_endpoint():

    start_dt = dt.datetime.now()
    json_data = request.get_json()

    if json_data.get("token") is None:
        raise InvalidUsage("token is required", status_code=400)

    token = json_data.get("token")
 if token != API_TOKEN:
        raise InvalidUsage("wrong API token", status_code=403)

    requster_name =""
    if json_data.get("requester_name"):
        requster_name = json_data.get("requester_name")

    location =""
    if json_data.get("location"):
        location = json_data.get("location")

    weather_date =""
    if json_data.get("date"):
        weather_date = json_data.get("date")


    url = "https://visual-crossing-weather.p.rapidapi.com/history"

    querystring = {
                "startDateTime":weather_date+"T15:00:00",
                "aggregateHours":"24",
                "location":location,
                "unitGroup":"metric",
                "contentType":"json",
                "requester_name":requster_name
                }
 headers = {
    "X-RapidAPI-Key": "",
    "X-RapidAPI-Host": "visual-crossing-weather.p.rapidapi.com"
    }

    response = requests.request("GET", url, headers=headers, params=querystring)

    response_dict = response.json()

    res = {
     "requester_name" : json_data.get("requester_name"),
    "timestamp" : start_dt.isoformat(),
    "location" : response_dict['locations'][querystring['location']]['id'],
    "date": response_dict["locations"][querystring["location"]]["values"][0]['datetimeStr'].split('T')[0],
    "wheather":
        {
        "temp_c_max" : response_dict['locations'][querystring['location']]["values"][0]["maxt"],
        "temp_c" : response_dict['locations'][querystring['location']]["values"][0]["temp"],
        "temp_c_min" : response_dict['locations'][querystring['location']]["values"][0]["mint"],
        "wind_kph" : response_dict['locations'][querystring['location']]["values"][0]["wspd"],
        "pressure_mb" : response_dict['locations'][querystring['location']]["values"][0]["sealevelpressure"],
        "humidity" : response_dict['locations'][querystring['location']]["values"][0]["humidity"],
        "weathertype" : response_dict['locations'][querystring['location']]["values"][0]["weathertype"],
        "visibility" : response_dict['locations'][querystring['location']]["values"][0]["visibility"],
        "cloudcover" : response_dict['locations'][querystring['location']]["values"][0]["cloudcover"]
        }
    }
    return res
